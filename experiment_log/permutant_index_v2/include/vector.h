#ifndef VECT_H
#define VECT_H

/*
 * vect.h -- type-safe generic dynamic array
 * made by sixthgear. BSD Licenced.
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define VECT_CAPACITY 256

/* vector type for use in type-unsafe functions */
/* macros will generate type-safe functions for each type called in */
/* VECT_GENERATE_TYPE */
typedef struct
{
  int size;
  int capacity;
  size_t data_size;
  void *data;
} vect;

void vect_err(const char *error);
vect * vect_init(size_t data_size, unsigned int capacity);
void vect_free(void *v);
void vect_resize(vect *v);
unsigned int vect_chk_bounds(vect *v, unsigned int pos);
unsigned int vect_at(vect *v, unsigned int pos);
unsigned int vect_set(vect *v, unsigned int pos);
unsigned int vect_push(vect *v);
unsigned int vect_pop(vect *v);
unsigned int vect_rem(vect *v, unsigned int pos);
unsigned int vect_ins(vect *v, unsigned int pos);

/* vector type for use in type-safe functions */
/* functions for each type must be generated by VECT_GENERATE_TYPE(type) */
/* or VECT_GENERATE_NAME(type, name) for pointer types or multiple qualifiers */

#define VECT_GENERATE_TYPE(TYPE) VECT_GENERATE_NAME(TYPE, TYPE)
#define VECT_GENERATE_NAME(TYPE, NAME)                              \
  typedef struct                                                    \
  {                                                                 \
    int size;                                                       \
    int capacity;                                                   \
    size_t data_size;                                               \
    TYPE *data;                                                     \
  } vect_##NAME;                                                    \
  vect_##NAME *                                                     \
      vect_init_##NAME(unsigned int capacity)                       \
  {                                                                 \
    return (vect_##NAME *)vect_init(sizeof(TYPE), capacity);        \
  }                                                                 \
  TYPE *                                                            \
      vect_ptr_##NAME(vect_##NAME *v, unsigned int pos)             \
  {                                                                 \
    return v->data + vect_at((vect *)v, pos);                       \
  }                                                                 \
  TYPE                                                              \
      vect_at_##NAME(vect_##NAME *v, unsigned int pos)              \
  {                                                                 \
    return v->data[vect_at((vect *)v, pos)];                        \
  }                                                                 \
  void                                                              \
      vect_push_##NAME(vect_##NAME *v, TYPE value)                  \
  {                                                                 \
    v->data[vect_push((vect *)v)] = value;                          \
  }                                                                 \
  void                                                              \
      vect_set_##NAME(vect_##NAME *v, unsigned int pos, TYPE value) \
  {                                                                 \
    v->data[vect_set((vect *)v, pos)] = value;                      \
  }                                                                 \
  TYPE                                                              \
      vect_pop_##NAME(vect_##NAME *v)                               \
  {                                                                 \
    return v->data[vect_pop((vect *)v)];                            \
  }                                                                 \
  void                                                              \
      vect_rem_##NAME(vect_##NAME *v, unsigned int pos)             \
  {                                                                 \
    vect_rem((vect *)v, pos);                                       \
  }                                                                 \
  void                                                              \
      vect_ins_##NAME(vect_##NAME *v, unsigned int pos, TYPE value) \
  {                                                                 \
    v->data[vect_ins((vect *)v, pos)] = value;                      \
  }                                                                 \
  void                                                              \
      vect_cat_##NAME(vect_##NAME *v1, vect_##NAME *v2)             \
  {                                                                 \
    return;                                                         \
  }
  
#endif